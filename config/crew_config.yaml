- id: Wd245pRF
  entity_type: tool
  data:
    name: TelegramBotTool
    description: Tool to interact with Telegram bot - send messages, files, and receive
      updates
    parameters:
      bot_token: null
- id: C_VnWLifDr
  entity_type: crew
  data:
    name: Auren Elite Performance
    process: sequential
    verbose: true
    agent_ids: [ui_agent]
    task_ids: [ui_intake_task]
    memory: true
    cache: true
    planning: true
    max_rpm: 1000
    manager_llm: 'OpenAI: gpt-4o'
    manager_agent_id: null
    created_at: '2025-07-08T21:10:00.000000'
    knowledge_source_ids: []
- id: KS_sIFUFJWe
  entity_type: knowledge_source
  data:
    name: Journal PDF
    source_type: pdf
    source_path: ''
    content: ''
    metadata: {}
    chunk_size: 4000
    chunk_overlap: 200
    created_at: '2025-07-06T23:28:42.342845'

# --- Enhanced Tools for Elite Performance UI Agent ---
- id: T_WhatsAppWebhook
  entity_type: tool
  data:
    name: TelegramBotTool
    description: WhatsApp webhook functionality (using Telegram as proxy)
    parameters:
      bot_token: null

- id: T_JSONLogger
  entity_type: tool
  data:
    name: CustomFileWriteTool
    description: JSON logging functionality for structured data capture
    parameters:
      base_folder: "logs"
      filename: "athlete_interactions.json"

- id: T_IntentClassifier
  entity_type: tool
  data:
    name: HealthDataParserTool
    description: Intent classification and athlete request parsing
    parameters: {}

- id: T_HealthParser
  entity_type: tool
  data:
    name: HealthDataParserTool
    description: Parse natural language health messages into structured data.
    parameters: {}

- id: T_AliasFileRead
  entity_type: tool
  data:
    name: FileReadTool
    description: Read the user context JSON file.
    parameters:
      file_path: "user_context.json"

- id: T_AliasFileWrite
  entity_type: tool
  data:
    name: CustomFileWriteTool
    description: Write/update the user context JSON file.
    parameters:
      base_folder: "."
      filename: "user_context.json"

- id: T_ProtocolRead
  entity_type: tool
  data:
    name: FileReadTool
    description: Read the static AUREN protocol JSON.
    parameters:
      file_path: "protocol_static.json"

- id: T_ReadPdf
  entity_type: tool
  data:
    name: ReadPdfTextTool
    description: Read-only access to the history PDF.
    parameters:
      file_path: "history/auren_history.pdf"

# --- Enhanced UI Agent for Elite Performance ---
- id: ui_agent
  entity_type: agent
  data:
    role: Elite Performance Interface Specialist
    goal: >-
      Capture athlete intent with zero friction, normalize all inputs into structured data,
      and seamlessly dispatch optimization requests to specialist agents while maintaining
      conversational flow and athlete engagement
    backstory: >-
      You are the first point of contact for world-class athletes seeking peak performance.
      You understand that every interaction could impact training, recovery, or competition prep.
      You excel at reading between the linesâ€”whether an athlete sends "feeling tired" or uploads
      a training video, you intuitively categorize the request and route it to the right specialist.
      You maintain professional warmth while being precise about data collection.
    
    llm_provider_model: "OpenAI: gpt-4o"
    verbose: true
    max_iter: 1
    allow_delegation: false
    cache: true
    temperature: 0.3
    
    # Enhanced configuration parameters
    respect_context_window: true
    inject_date: true
    date_format: "%Y-%m-%d %H:%M:%S UTC"
    reasoning: true
    max_reasoning_attempts: 2
    
    tool_ids:
      - T_WhatsAppWebhook  # WhatsAppWebhookTool
      - T_JSONLogger       # JSONLoggerTool
      - T_IntentClassifier # IntentClassifierTool
    knowledge_source_ids: []

# --- Enhanced UI Intake Task for Elite Performance ---
- id: ui_intake_task
  entity_type: task
  data:
    description: >-
      Process incoming athlete communication through WhatsApp webhook.
      
      WORKFLOW:
      1. Extract message content, media attachments, and metadata
      2. Classify intent using these categories:
         - TRAINING_LOG (workout data, performance metrics)
         - NUTRITION_QUERY (meal logging, dietary questions)  
         - RECOVERY_STATUS (sleep, fatigue, readiness)
         - BODY_COMPOSITION (progress photos, measurements)
         - SUPPLEMENT_PROTOCOL (peptide scheduling, dosing questions)
         - GENERAL_INQUIRY (questions, scheduling, misc)
      3. Normalize data into standardized JSON schema
      4. Log structured entry with intent classification
      5. Generate immediate acknowledgment response
      6. Dispatch to appropriate specialist agent via task delegation

      CONSTRAINTS:
      - Respond within 3 seconds for acknowledgment
      - Maintain athlete confidentiality (no names in logs)
      - Handle multimedia gracefully (photos, voice, video)
      - Preserve original message context for specialist agents
    expected_output: >-
      JSON object containing:
      {
        "session_id": "uuid4",
        "timestamp": "ISO datetime", 
        "athlete_id": "hashed_identifier",
        "intent_category": "enum_value",
        "confidence_score": 0.0-1.0,
        "extracted_data": {},
        "media_attachments": [],
        "acknowledgment_sent": "message_text",
        "next_agent_dispatch": "agent_role"
      }
    agent_id: ui_agent
    async_execution: false
    context_from_async_tasks_ids: []
    context_from_sync_tasks_ids: []
    created_at: "2025-07-08T21:05:00.000000"
